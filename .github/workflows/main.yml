name: main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'
  workflow_dispatch:  # Manual trigger

env:
  DOTNET_VERSION: 7.0.x
  IMAGE_NAME: 'farm-weather-poller'
  GIT_SHA: ${{ github.sha }}
  NUGET_VERSION_CHANGED: 'false'

jobs:
  version_check:
    name: Check previous nuget version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine if version changed
        id: version_changed
        run: |
          if git show HEAD~1:src/Farm.Weather.Contracts/Farm.Weather.Contracts.csproj &>/dev/null; then
            PREVIOUS_VERSION=$(git show HEAD~1:src/Farm.Weather.Contracts/Farm.Weather.Contracts.csproj | grep -Po '(?<=<Version>)([^<]+)')
          else
            PREVIOUS_VERSION="INITIAL_VERSION"
          fi

          CURRENT_VERSION=$(grep -Po '(?<=<Version>)([^<]+)' src/Farm.Weather.Contracts/Farm.Weather.Contracts.csproj)

          if [ "$PREVIOUS_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Version has changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "NUGET_VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "Version has not changed."
            echo "NUGET_VERSION_CHANGED=false" >> $GITHUB_ENV
          fi

  build_and_test:
    name: Build and Test
    needs: version_check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: UnitTest
        run: dotnet test tests/Farm.Weather.Poller.UnitTests/Farm.Weather.Poller.UnitTests.csproj --no-build --verbosity normal -c Release

      - name: Create the package
        if: github.ref == 'refs/heads/main' && ${{ env.NUGET_VERSION_CHANGED == 'true' }}
        run: dotnet pack -c Release src/Farm.Weather.Contracts/Farm.Weather.Contracts.csproj

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main' && ${{ env.NUGET_VERSION_CHANGED == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: build_and_test_result
          path: src/Farm.Weather.Contracts/bin/Release/*.nupkg

  publish:
    name: Publish to Nuget
    needs: build_and_test
    if: |
      github.ref == 'refs/heads/main' &&
      needs.version_check.outputs.NUGET_VERSION_CHANGED == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download test artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_and_test_result

      - name: Publish the package to nuget.org
        run: dotnet nuget push *.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}

  docker_build_and_publish:
    name: Docker Build and Publish
    needs: build_and_test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/Farm.Weather.Poller/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
  #            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.GIT_SHA }}

  deploy-dev:
    name: Deploy Dev
    needs: docker_build_and_publish
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          debug: true
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_Key }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Pull latest image:";
            docker pull '${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest';
            echo "Stop and remove current container:";
            docker rm -f farm-weather-poller;
            echo "Starting new container with args:";
            docker run --name farm-weather-poller -d -e VAULT_API_URL=${{ secrets.VAULT_URL }} -e VAULT_API_TOKEN=${{ secrets.VAULT_TOKEN }} '${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest';
            echo "Prune images and volumes:";
            docker image prune -af;
            docker volume prune -f;
